// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// generator trpc {
//     provider             = "prisma-trpc-generator"
//     withZod              = true
//     withMiddleware       = true
//     withShield           = false
//     contextPath          = "../src/server/api/trpc"
//     trpcOptionsPath      = "../src/server/api/trpc"
//     output               = "../src/server/api/routers/raw"
//     isGenerateInclude    = true
//     generateModelActions = "count,create,delete,deleteMany,findFirst,findMany,findUnique,update,updateMany,upsert"
// }

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

/// @@Gen.model(hide: true)
model Settings {
    id             String   @id @default(cuid())
    ofAdmin        Boolean? @unique
    appIcon        String?
    appIconId      String?
    appName        String?
    appDescription String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

/// @@Gen.model(hide: true)
model ReportSignatory {
    id        String   @id @default(cuid())
    position  String   @unique
    name      String   @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// @@Gen.model(hide: true)
model Organization {
    id            String               @id @default(cuid())
    name          String
    acronym       String
    contactEmail  String
    description   String               @default("")
    category      OrganizationCategory
    image         String?
    imageId       String?
    isArchived    Boolean              @default(false)
    members       User[]
    reports       Report[]
    comments      Comment[]
    notifications Notification[]
    logs          Log[]
    announcements Announcement[]
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @updatedAt

    // Extras
    signatoryInfo         OrgSignatoryInfo?
    curriculumVitaes      CurriculumVitae[]
    generatedARs          GeneratedAR[]
    financialStatements   FinancialStatement[]
    monthlyFSs            MonthlyFS[]
    inflowCollectionFS    InflowCollectionFS[]
    inflowCollectionRowFS InflowCollectionRowFS[]
    inflowIgpFS           InflowIgpFS[]
    inflowIgpRowFS        InflowIgpRowFS[]
    outflowFS             OutflowFS[]
    outflowRowFS          OutflowRowFS[]

    // TODO: To remove
    preamble String  @default("")
    mission  String  @default("")
    vision   String  @default("")
    goals    String  @default("")
    cbl      String?
    cblId    String?

    @@unique([id, name])
    @@unique([id, name, isArchived])
}

model OrgSignatoryInfo {
    id                     String   @id @default(cuid())
    president              String   @default("")
    vicePresident          String   @default("")
    treasurer              String   @default("")
    auditor                String   @default("")
    generalSecretary       String   @default("")
    assistantSecretary     String   @default("")
    finance                String   @default("")
    recruitmentCoordinator String   @default("")
    trainingDirector       String   @default("")
    adviser1               String   @default("")
    adviser2               String   @default("")
    deptChairperson        String   @default("")
    createdAt              DateTime @default(now())
    updatedAt              DateTime @updatedAt

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @unique
}

model CurriculumVitae {
    id        String   @id @default(cuid())
    name      String
    position  String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

/// @@Gen.model(hide: true)
model Announcement {
    id                 String              @id @default(cuid())
    subject            String
    description        String
    file               String?
    fileId             String?
    start              DateTime?
    due                DateTime?
    hasReport          Boolean
    isCompleted        Boolean             @default(false)
    isArchived         Boolean             @default(false)
    audience           Organization[]
    comments           Comment[]
    reports            Report[]
    adminNotifications AdminNotification[]
    notifications      Notification[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

/// @@Gen.model(hide: true)
model ReportSemester {
    id                  String               @id @default(cuid())
    yearStart           String
    yearEnd             String
    term                SemesterTerm
    dueDateAR           DateTime?
    dueDateFS           DateTime?
    financialStatements FinancialStatement[]
    monthlyFSs          MonthlyFS[]
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    archivedAt          String               @unique @default("")

    @@unique([id, archivedAt])
}

model GeneratedAR {
    id           String              @id @default(cuid())
    templateType GeneratedARTemplate
    content      String
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt
    archivedAt   String              @default("")

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

/// @@Gen.model(hide: true)
model FinancialStatement {
    id         String          @id @default(cuid())
    actualCash Decimal         @default(0) @db.Money
    compiled   String?
    compiledId String?
    status     SemReportStatus @default(DRAFT)
    monthly    MonthlyFS[]
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt

    reportSemester   ReportSemester @relation(fields: [reportSemesterId, archivedAt], references: [id, archivedAt])
    reportSemesterId String
    archivedAt       String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    @@unique([reportSemesterId, organizationId])
}

model MonthlyFS {
    id                    String                  @id @default(cuid())
    month                 Int
    year                  String
    inflowCollections     InflowCollectionFS[]
    inflowCollectionsRows InflowCollectionRowFS[]
    inflowIGPs            InflowIgpFS[]
    inflowIgpRows         InflowIgpRowFS[]
    outflows              OutflowFS[]
    outflowRows           OutflowRowFS[]
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt

    financialStatement   FinancialStatement @relation(fields: [financialStatementId], references: [id])
    financialStatementId String

    reportSemester   ReportSemester @relation(fields: [reportSemesterId, archivedAt], references: [id, archivedAt])
    reportSemesterId String
    archivedAt       String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    @@unique([month, year, financialStatementId])
}

model InflowCollectionFS {
    id          String                  @id @default(cuid())
    date        DateTime
    description String                  @default("")
    rows        InflowCollectionRowFS[]
    createdAt   DateTime                @default(now())
    updatedAt   DateTime                @updatedAt

    monthly   MonthlyFS @relation(fields: [monthlyId], references: [id], onDelete: Cascade)
    monthlyId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

model InflowCollectionRowFS {
    id        String   @id @default(cuid())
    date      DateTime
    name      String
    ORNumber  String
    amount    Decimal  @db.Money
    receipt   String?
    receiptId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    monthly   MonthlyFS @relation(fields: [monthlyId], references: [id])
    monthlyId String

    inflowCollection   InflowCollectionFS @relation(fields: [inflowCollectionId], references: [id], onDelete: Cascade)
    inflowCollectionId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

model InflowIgpFS {
    id          String           @id @default(cuid())
    date        DateTime
    description String           @default("")
    rows        InflowIgpRowFS[]
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt

    monthly   MonthlyFS @relation(fields: [monthlyId], references: [id], onDelete: Cascade)
    monthlyId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

model InflowIgpRowFS {
    id          String   @id @default(cuid())
    date        DateTime
    quantity    Int
    particulars String
    ORNumber    String
    unit        String
    price       Decimal  @db.Money
    receipt     String?
    receiptId   String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    monthly   MonthlyFS @relation(fields: [monthlyId], references: [id])
    monthlyId String

    inflowIGP   InflowIgpFS @relation(fields: [inflowIGPId], references: [id], onDelete: Cascade)
    inflowIGPId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

model OutflowFS {
    id          String            @id @default(cuid())
    category    OutflowFSCategory
    date        DateTime
    description String            @default("")
    rows        OutflowRowFS[]
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    monthly   MonthlyFS @relation(fields: [monthlyId], references: [id], onDelete: Cascade)
    monthlyId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

model OutflowRowFS {
    id          String   @id @default(cuid())
    date        DateTime
    quantity    Int
    particulars String
    unit        String
    price       Decimal  @db.Money
    receipt     String?
    receiptId   String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    monthly   MonthlyFS @relation(fields: [monthlyId], references: [id])
    monthlyId String

    outflow   OutflowFS @relation(fields: [outflowId], references: [id], onDelete: Cascade)
    outflowId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

/// @@Gen.model(hide: true)
model Report {
    id                 String              @id @default(cuid())
    subject            String
    description        String
    category           ReportCategory
    visibility         ReportVisibility
    file               String?
    fileId             String?
    hasSchedule        Boolean
    due                DateTime?
    status             ReportStatus        @default(PENDING)
    isCompleted        Boolean             @default(false)
    isArchived         Boolean             @default(false)
    comments           Comment[]
    adminNotifications AdminNotification[]
    notifications      Notification[]
    logs               Log[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@unique([id, visibility])
}

/// @@Gen.model(hide: true)
model Comment {
    id                 String              @id @default(cuid())
    content            String
    isArchived         Boolean             @default(false)
    adminNotifications AdminNotification[]
    notifications      Notification[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    report   Report? @relation(fields: [reportId], references: [id])
    reportId String?

    createdBy     User   @relation(fields: [createdById, createdByName], references: [id, name])
    createdById   String
    createdByName String

    organization     Organization? @relation(fields: [organizationId, organizationName], references: [id, name])
    organizationId   String?
    organizationName String?
}

/// @@Gen.model(hide: true)
model AdminNotification {
    id        String           @id @default(cuid())
    type      NotificationType
    message   String
    isRead    Boolean          @default(false)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    report   Report? @relation(fields: [reportId], references: [id])
    reportId String?

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?
}

/// @@Gen.model(hide: true)
model Notification {
    id        String           @id @default(cuid())
    type      NotificationType
    message   String
    isRead    Boolean          @default(false)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    report           Report?           @relation(fields: [reportId, reportVisibility], references: [id, visibility])
    reportId         String?
    reportVisibility ReportVisibility?

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?
}

/// @@Gen.model(hide: true)
model Log {
    id        String          @id @default(cuid())
    type      LogType
    name      String
    email     String?
    subject   String?
    category  ReportCategory?
    action    LogAction
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    report           Report?           @relation(fields: [reportId, reportVisibility], references: [id, visibility])
    reportId         String?
    reportVisibility ReportVisibility?

    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
}

// Necessary for auth
/// @@Gen.model(hide: true)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

/// @@Gen.model(hide: true)
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@Gen.model(hide: true)
model User {
    id            String         @id @default(cuid())
    name          String
    email         String         @unique
    emailVerified DateTime?
    image         String?
    role          UserRole       @default(STUDENT_LEADER)
    isActive      Boolean        @default(false)
    accounts      Account[]
    sessions      Session[]
    reports       Report[]
    comments      Comment[]
    notifications Notification[]
    logs          Log[]

    organization           Organization? @relation(fields: [organizationId, organizationName, organizationIsArchived], references: [id, name, isArchived])
    organizationId         String?
    organizationName       String?
    organizationIsArchived Boolean?

    // Extras
    generatedARs GeneratedAR[]

    @@unique([id, name])
}

/// @@Gen.model(hide: true)
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    ADMIN
    STUDENT_LEADER
}

enum OrganizationCategory {
    STUDENT_GOVERNING_BODY
    ACADEMIC_ORGANIZATION
    NON_ACADEMIC_ORGANIZATION
}

enum SemesterTerm {
    FIRST
    SECOND
    SUMMER
}

enum SemReportStatus {
    DRAFT
    TURNED_IN
    FOR_REVISION
    COMPLETED
}

enum GeneratedARTemplate {
    CONSTITUTION_AND_BY_LAWS
    ACCEPTANCE_LETTER_OF_ADVISERS
    ORGANIZATIONAL_CHART
    CURRICULUM_VITAE_OF_OFFICERS
    CALENDAR_OF_ACTIVITIES
    ACTIVITY_PROPOSAL
    PROJECT_PROPOSAL
    RESOLUTION
    OTHER_LETTER
    SUMMARY_OF_CONDUCTED_EVENTS
    COMMUNITY_EXTENSION_SERVICES
    MINUTES_OF_THE_MEETING
    FEEDBACK_FORM
}

enum OutflowFSCategory {
    FOOD_EXPENSE
    SUPPLIES_EXPENSE
    TRANSPORTATION_EXPENSE
    RENT_EXPENSE
    REPRESENTATION_EXPENSE
    MEDICAL_EXPENSE
    COMMUNICATION_EXPENSE
    MISCELLANEOUS_EXPENSE
    TOKEN_EXPENSE
}

enum ReportCategory {
    ACCOMPLISHMENT
    FINANCIAL
    RESOLUTION
    OTHER
}

enum ReportVisibility {
    PUBLIC
    PRIVATE
}

enum ReportStatus {
    PENDING
    CANCELLED
    APPROVED
    REJECTED
}

enum NotificationType {
    ANNOUNCEMENT
    ANNOUNCEMENT_COMMENT
    REPORT
    REPORT_COMMENT
}

enum LogType {
    AUTH
    REPORT
}

enum LogAction {
    SIGN_IN
    SIGN_OUT

    PENDING
    CANCELLED
    APPROVED
    REJECTED
    ARCHIVED
    UNARCHIVED
}
