// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Organization {
    id          String                @id @default(cuid())
    name        String
    description String                @default("")
    category    OrganizationCategory?
    image       String?
    imageId     String?
    status      CommonStatus          @default(ACTIVE)
    members     User[]
    createdAt   DateTime              @default(now())
    updatedAt   DateTime              @updatedAt
}

model Announcement {
    id         String       @id @default(cuid())
    subject    String
    message    String
    start      DateTime?
    due        DateTime?
    withReport Boolean      @default(false)
    status     CommonStatus @default(ACTIVE)
    audience   User[]
    comments   Comment[]
    reports    Report[]
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
}

model Report {
    id           String           @id @default(cuid())
    subject      String
    message      String
    category     ReportCategory
    visibility   ReportVisibility
    file         String?
    withSchedule Boolean
    schedule     DateTime?
    status       ReportStatus     @default(PENDING)
    comments     Comment[]
    logs         Log[]
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    report   Report? @relation(fields: [reportId], references: [id])
    reportId String?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model Log {
    id        String   @id @default(cuid())
    userId    String
    userName  String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    report       Report?      @relation(fields: [reportId], references: [id])
    reportId     String?
    subject      String
    reportStatus ReportStatus @default(PENDING)
}

// Necessary for auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String                @id @default(cuid())
    name          String
    email         String                @unique
    emailVerified DateTime?
    image         String?
    imageId       String?
    description   String                @default("")
    category      OrganizationCategory?
    role          UserRole              @default(STUDENT_LEADER)
    status        CommonStatus          @default(ACTIVE)
    accounts      Account[]
    sessions      Session[]
    reports       Report[]
    comments      Comment[]
    announcements Announcement[]

    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum CommonStatus {
    ACTIVE
    ARCHIVED
    DELETED
}

enum UserRole {
    ADMIN
    STUDENT_LEADER
}

enum OrganizationCategory {
    STUDENT_GOVERNING_BODY
    ACADEMIC_ORGANIZATION
    NON_ACADEMIC_ORGANIZATION
}

enum ReportCategory {
    ACCOMPLISHMENT
    FINANCIAL
    RESOLUTION
    OTHER
}

enum ReportVisibility {
    PUBLIC
    PRIVATE
}

enum ReportStatus {
    PENDING
    CANCELLED
    APPROVED
    REJECTED
    ARCHIVED
    DELETED
}
