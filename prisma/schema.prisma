// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Settings {
    id             String   @id @default(cuid())
    ofAdmin        Boolean? @unique
    appIcon        String?
    appIconId      String?
    appName        String?
    appDescription String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Organization {
    id            String               @id @default(cuid())
    name          String
    description   String               @default("")
    category      OrganizationCategory
    image         String?
    imageId       String?
    isArchived    Boolean              @default(false)
    members       User[]
    reports       Report[]
    comments      Comment[]
    announcements Announcement[]
    notifications Notification[]
    logs          Log[]
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @updatedAt

    @@unique([id, name])
    @@unique([id, name, isArchived])
}

model Announcement {
    id                 String              @id @default(cuid())
    subject            String
    description        String
    start              DateTime?
    due                DateTime?
    hasReport          Boolean
    isArchived         Boolean             @default(false)
    audience           Organization[]
    comments           Comment[]
    reports            Report[]
    adminNotifications AdminNotification[]
    notifications      Notification[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

model Report {
    id                 String              @id @default(cuid())
    subject            String
    description        String
    category           ReportCategory
    visibility         ReportVisibility
    file               String?
    fileId             String?
    hasSchedule        Boolean
    due                DateTime?
    status             ReportStatus        @default(PENDING)
    isArchived         Boolean             @default(false)
    comments           Comment[]
    adminNotifications AdminNotification[]
    notifications      Notification[]
    logs               Log[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@unique([id, visibility])
}

model Comment {
    id                 String              @id @default(cuid())
    content            String
    isArchived         Boolean             @default(false)
    adminNotifications AdminNotification[]
    notifications      Notification[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    report   Report? @relation(fields: [reportId], references: [id])
    reportId String?

    createdBy     User   @relation(fields: [createdById, createdByName], references: [id, name])
    createdById   String
    createdByName String

    organization     Organization? @relation(fields: [organizationId, organizationName], references: [id, name])
    organizationId   String?
    organizationName String?
}

model AdminNotification {
    id        String           @id @default(cuid())
    type      NotificationType
    message   String
    isRead    Boolean          @default(false)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    report   Report? @relation(fields: [reportId], references: [id])
    reportId String?

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?
}

model Notification {
    id        String           @id @default(cuid())
    type      NotificationType
    message   String
    isRead    Boolean          @default(false)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    announcementId String?

    report           Report?           @relation(fields: [reportId, reportVisibility], references: [id, visibility])
    reportId         String?
    reportVisibility ReportVisibility?

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?
}

model Log {
    id        String          @id @default(cuid())
    type      LogType
    name      String
    email     String?
    subject   String?
    category  ReportCategory?
    action    LogAction
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    report   Report? @relation(fields: [reportId], references: [id])
    reportId String?

    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
}

// Necessary for auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String
    email         String         @unique
    emailVerified DateTime?
    image         String?
    role          UserRole       @default(STUDENT_LEADER)
    accounts      Account[]
    sessions      Session[]
    reports       Report[]
    comments      Comment[]
    notifications Notification[]
    logs          Log[]

    organization           Organization? @relation(fields: [organizationId, organizationName, organizationIsArchived], references: [id, name, isArchived])
    organizationId         String?
    organizationName       String?
    organizationIsArchived Boolean?

    @@unique([id, name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    ADMIN
    STUDENT_LEADER
}

enum OrganizationCategory {
    STUDENT_GOVERNING_BODY
    ACADEMIC_ORGANIZATION
    NON_ACADEMIC_ORGANIZATION
}

enum ReportCategory {
    ACCOMPLISHMENT
    FINANCIAL
    RESOLUTION
    OTHER
}

enum ReportVisibility {
    PUBLIC
    PRIVATE
}

enum ReportStatus {
    PENDING
    CANCELLED
    APPROVED
    REJECTED
}

enum NotificationType {
    ANNOUNCEMENT
    ANNOUNCEMENT_COMMENT
    REPORT
    REPORT_COMMENT
}

enum LogType {
    AUTH
    REPORT
}

enum LogAction {
    SIGN_IN
    SIGN_OUT

    PENDING
    CANCELLED
    APPROVED
    REJECTED
    ARCHIVED
    UNARCHIVED
}
